
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu May 27 01:43:08 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.*;
import asint.*;
import ast.*;
import errors.GestionErroresTiny;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu May 27 01:43:08 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\010\004" +
    "\000\002\010\002\000\002\012\007\000\002\012\005\000" +
    "\002\004\010\000\002\004\005\000\002\005\005\000\002" +
    "\005\004\000\002\006\011\000\002\006\005\000\002\007" +
    "\005\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\011\010\000\002\011\005\000\002\011\010\000" +
    "\002\011\010\000\002\046\005\000\002\046\003\000\002" +
    "\046\002\000\002\046\004\000\002\013\005\000\002\013" +
    "\005\000\002\014\004\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\004\000\002\017\003\000\002\017\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\004\000\002\026\003\000\002\041\006" +
    "\000\002\041\005\000\002\020\005\000\002\027\006\000" +
    "\002\027\010\000\002\027\006\000\002\027\006\000\002" +
    "\027\010\000\002\027\010\000\002\030\005\000\002\030" +
    "\005\000\002\033\003\000\002\034\004\000\002\034\004" +
    "\000\002\032\006\000\002\032\005\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\031\011\000\002\031\007\000\002\031\007\000\002\047" +
    "\007\000\002\047\006\000\002\047\006\000\002\047\005" +
    "\000\002\035\006\000\002\035\004\000\002\036\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\004\000\002" +
    "\042\003\000\002\042\004\000\002\042\003\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\006\000\002\044\005\000\002\044\005\000" +
    "\002\044\004\000\002\045\006\000\002\045\002\000\002" +
    "\045\005\000\002\050\005\000\002\051\003\000\002\051" +
    "\003\000\002\053\005\000\002\053\003\000\002\053\002" +
    "\000\002\053\005\000\002\052\005\000\002\052\003\000" +
    "\002\052\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\024\003\ufffd\005\ufffd\020\ufffd\021\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\001\002\000\024" +
    "\003\ufffb\005\ufffb\020\012\021\007\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\005\372\001\002\000" +
    "\020\003\151\005\146\024\026\025\147\026\025\027\021" +
    "\030\022\001\002\000\024\003\ufffe\005\ufffe\020\ufffe\021" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\001\002" +
    "\000\004\005\014\001\002\000\024\003\uffff\005\uffff\020" +
    "\uffff\021\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\001\002\000\006\003\015\035\016\001\002\000\024\003" +
    "\ufff7\005\ufff7\020\ufff7\021\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\001\002\000\014\005\024\024\026\026" +
    "\025\027\021\030\022\001\002\000\016\005\024\024\026" +
    "\026\025\027\021\030\022\036\141\001\002\000\006\003" +
    "\136\005\137\001\002\000\010\003\uffcf\005\uffcf\037\uffcf" +
    "\001\002\000\010\003\uffd0\005\uffd0\037\uffd0\001\002\000" +
    "\004\043\135\001\002\000\004\005\027\001\002\000\010" +
    "\003\uffd1\005\uffd1\037\uffd1\001\002\000\010\003\uffd2\005" +
    "\uffd2\037\uffd2\001\002\000\016\003\uff81\034\uff81\037\uff81" +
    "\041\uff81\042\uff81\043\uff81\001\002\000\016\003\uff8f\034" +
    "\uff8f\037\031\041\uff8f\042\uff8f\043\uff8f\001\002\000\026" +
    "\003\043\005\041\006\036\007\032\010\050\031\040\032" +
    "\042\033\037\051\034\060\044\001\002\000\052\003\uffb3" +
    "\034\uffb3\036\uffb3\040\uffb3\042\uffb3\043\uffb3\045\uffb3\047" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\001" +
    "\002\000\004\040\134\001\002\000\022\005\041\006\036" +
    "\007\032\010\050\031\040\032\042\033\037\060\044\001" +
    "\002\000\052\003\uffb1\034\uffb1\036\uffb1\040\uffb1\042\uffb1" +
    "\043\uffb1\045\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\065\uffb1\001\002\000\052\003\uffb4\034\uffb4\036" +
    "\uffb4\040\uffb4\042\uffb4\043\uffb4\045\uffb4\047\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000\024" +
    "\005\041\006\036\007\032\010\050\031\040\032\042\033" +
    "\037\051\034\060\044\001\002\000\052\003\uffb6\034\uffb6" +
    "\036\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\047\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\060\003\uffaf\033\110\034\uffaf\036\uffaf\037\106\040\uffaf" +
    "\042\uffaf\043\uffaf\044\107\045\uffaf\047\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\001\002\000\052\003" +
    "\uffb5\034\uffb5\036\uffb5\040\uffb5\042\uffb5\043\uffb5\045\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\001\002\000\020\003\uff80\005\uff80\034\uff80\037\uff80\041" +
    "\uff80\042\uff80\043\uff80\001\002\000\022\005\041\006\036" +
    "\007\032\010\050\031\040\032\042\033\037\060\044\001" +
    "\002\000\052\003\uffb8\034\uffb8\036\uffb8\040\uffb8\042\uffb8" +
    "\043\uffb8\045\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\103\055\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\001\002\000\050\003\uffbb\034\uffbb\036" +
    "\uffbb\040\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb\051\uffbb" +
    "\052\100\053\077\055\uffbb\056\uffbb\057\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\044\003\uffbe" +
    "\034\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\045\uffbe\047" +
    "\073\051\074\055\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\001\002\000\052\003\uffb2\034" +
    "\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2\045\uffb2\047\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\040\003\uffc2\034\uffc2\036\uffc2\040\uffc2\042\uffc2\043" +
    "\uffc2\045\uffc2\055\uffc2\056\uffc2\057\064\061\057\062\062" +
    "\063\063\064\061\065\060\001\002\000\024\003\uffc9\034" +
    "\uffc9\036\uffc9\040\uffc9\042\uffc9\043\uffc9\045\uffc9\055\053" +
    "\056\054\001\002\000\024\005\041\006\036\007\032\010" +
    "\050\031\040\032\042\033\037\051\034\060\044\001\002" +
    "\000\024\005\041\006\036\007\032\010\050\031\040\032" +
    "\042\033\037\051\034\060\044\001\002\000\020\003\uffca" +
    "\034\uffca\036\uffca\040\uffca\042\uffca\043\uffca\045\uffca\001" +
    "\002\000\020\003\uffcb\034\uffcb\036\uffcb\040\uffcb\042\uffcb" +
    "\043\uffcb\045\uffcb\001\002\000\024\005\041\006\036\007" +
    "\032\010\050\031\040\032\042\033\037\051\034\060\044" +
    "\001\002\000\024\005\041\006\036\007\032\010\050\031" +
    "\040\032\042\033\037\051\034\060\044\001\002\000\024" +
    "\005\041\006\036\007\032\010\050\031\040\032\042\033" +
    "\037\051\034\060\044\001\002\000\024\005\041\006\036" +
    "\007\032\010\050\031\040\032\042\033\037\051\034\060" +
    "\044\001\002\000\024\005\041\006\036\007\032\010\050" +
    "\031\040\032\042\033\037\051\034\060\044\001\002\000" +
    "\024\005\041\006\036\007\032\010\050\031\040\032\042" +
    "\033\037\051\034\060\044\001\002\000\024\003\uffc5\034" +
    "\uffc5\036\uffc5\040\uffc5\042\uffc5\043\uffc5\045\uffc5\055\uffc5" +
    "\056\uffc5\001\002\000\024\003\uffc8\034\uffc8\036\uffc8\040" +
    "\uffc8\042\uffc8\043\uffc8\045\uffc8\055\uffc8\056\uffc8\001\002" +
    "\000\024\003\uffc4\034\uffc4\036\uffc4\040\uffc4\042\uffc4\043" +
    "\uffc4\045\uffc4\055\uffc4\056\uffc4\001\002\000\024\003\uffc3" +
    "\034\uffc3\036\uffc3\040\uffc3\042\uffc3\043\uffc3\045\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\024\003\uffc7\034\uffc7\036\uffc7" +
    "\040\uffc7\042\uffc7\043\uffc7\045\uffc7\055\uffc7\056\uffc7\001" +
    "\002\000\024\003\uffc6\034\uffc6\036\uffc6\040\uffc6\042\uffc6" +
    "\043\uffc6\045\uffc6\055\uffc6\056\uffc6\001\002\000\024\005" +
    "\041\006\036\007\032\010\050\031\040\032\042\033\037" +
    "\051\034\060\044\001\002\000\024\005\041\006\036\007" +
    "\032\010\050\031\040\032\042\033\037\051\034\060\044" +
    "\001\002\000\040\003\uffc0\034\uffc0\036\uffc0\040\uffc0\042" +
    "\uffc0\043\uffc0\045\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\040\003" +
    "\uffc1\034\uffc1\036\uffc1\040\uffc1\042\uffc1\043\uffc1\045\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\001\002\000\022\005\041\006\036\007\032" +
    "\010\050\031\040\032\042\033\037\060\044\001\002\000" +
    "\022\005\041\006\036\007\032\010\050\031\040\032\042" +
    "\033\037\060\044\001\002\000\044\003\uffbd\034\uffbd\036" +
    "\uffbd\040\uffbd\042\uffbd\043\uffbd\045\uffbd\047\uffbd\051\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\001\002\000\044\003\uffbc\034\uffbc\036\uffbc" +
    "\040\uffbc\042\uffbc\043\uffbc\045\uffbc\047\uffbc\051\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\001\002\000\022\005\041\006\036\007\032\010" +
    "\050\031\040\032\042\033\037\060\044\001\002\000\050" +
    "\003\uffb9\034\uffb9\036\uffb9\040\uffb9\042\uffb9\043\uffb9\045" +
    "\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001" +
    "\002\000\050\003\uffba\034\uffba\036\uffba\040\uffba\042\uffba" +
    "\043\uffba\045\uffba\047\uffba\051\uffba\052\uffba\053\uffba\055" +
    "\uffba\056\uffba\057\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\001\002\000\024\005\041\006\036\007\032\010" +
    "\050\031\040\032\042\033\037\051\034\060\044\001\002" +
    "\000\004\005\126\001\002\000\032\003\117\005\041\006" +
    "\036\007\032\010\050\031\040\032\042\033\037\034\uff7a" +
    "\042\uff7a\051\034\060\044\001\002\000\056\003\uffb0\034" +
    "\uffb0\036\uffb0\037\113\040\uffb0\042\uffb0\043\uffb0\044\112" +
    "\045\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\001\002\000\004\005\116\001\002\000\024\005" +
    "\041\006\036\007\032\010\050\031\040\032\042\033\037" +
    "\051\034\060\044\001\002\000\004\040\115\001\002\000" +
    "\060\003\uff86\034\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\061\uff86" +
    "\062\uff86\063\uff86\064\uff86\065\uff86\001\002\000\060\003" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\047\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\001\002\000\052\003\uffad\034" +
    "\uffad\036\uffad\040\uffad\042\uffad\043\uffad\045\uffad\047\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\001\002" +
    "\000\006\034\123\042\122\001\002\000\010\034\uff7b\036" +
    "\uff7b\042\uff7b\001\002\000\026\003\125\005\041\006\036" +
    "\007\032\010\050\031\040\032\042\033\037\051\034\060" +
    "\044\001\002\000\052\003\uffae\034\uffae\036\uffae\040\uffae" +
    "\042\uffae\043\uffae\045\uffae\047\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\061\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\001\002\000\010\034\uff7c\036" +
    "\uff7c\042\uff7c\001\002\000\010\034\uff79\036\uff79\042\uff79" +
    "\001\002\000\060\003\uff83\034\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\047\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057" +
    "\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\001\002" +
    "\000\004\040\130\001\002\000\060\003\uff84\034\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\047\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\057\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\001\002\000\004\034\132\001\002\000\052\003" +
    "\uffb7\034\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\001\002\000\040\003\uffbf\034\uffbf\036\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\045\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\065\uffbf\001\002\000\020\003" +
    "\uff82\005\uff82\034\uff82\037\uff82\041\uff82\042\uff82\043\uff82" +
    "\001\002\000\016\005\ufff5\024\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\036\ufff5\001\002\000\014\003\uff8e\034\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\001\002\000\016\003\uff81\034\uff81\037" +
    "\uff81\041\uff81\042\uff81\043\uff81\001\002\000\016\003\uff90" +
    "\034\uff90\037\031\041\uff90\042\uff90\043\uff90\001\002\000" +
    "\004\043\144\001\002\000\004\043\143\001\002\000\016" +
    "\005\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\036\ufff6\001" +
    "\002\000\024\003\ufff8\005\ufff8\020\ufff8\021\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\001\002\000\010\003" +
    "\uff81\005\uff81\037\uff81\001\002\000\010\003\uff81\005\uff81" +
    "\037\uff81\001\002\000\010\003\uffcd\004\363\005\uffcd\001" +
    "\002\000\004\002\001\001\002\000\004\005\356\001\002" +
    "\000\006\003\154\005\155\001\002\000\020\003\ufffc\005" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\001\002" +
    "\000\004\033\352\001\002\000\006\003\156\033\157\001" +
    "\002\000\020\003\uffed\005\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\001\002\000\022\003\161\005\024\024" +
    "\026\026\025\027\021\030\022\034\uffe8\042\uffe8\001\002" +
    "\000\006\034\165\042\164\001\002\000\014\005\024\024" +
    "\026\026\025\027\021\030\022\001\002\000\006\034\uffe9" +
    "\042\uffe9\001\002\000\006\034\uffe7\042\uffe7\001\002\000" +
    "\014\005\024\024\026\026\025\027\021\030\022\001\002" +
    "\000\004\035\167\001\002\000\020\003\uffee\005\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\001\002\000\034" +
    "\005\174\011\171\012\176\015\210\016\175\022\215\023" +
    "\173\024\026\026\025\027\021\030\022\046\206\050\170" +
    "\001\002\000\004\005\350\001\002\000\006\003\345\033" +
    "\262\001\002\000\006\003\343\043\342\001\002\000\026" +
    "\003\341\005\041\006\036\007\032\010\050\031\040\032" +
    "\042\033\037\051\034\060\044\001\002\000\022\003\332" +
    "\005\027\033\333\037\106\041\uff8b\044\107\046\331\050" +
    "\330\001\002\000\006\003\301\033\302\001\002\000\006" +
    "\003\261\033\262\001\002\000\042\003\uffe3\005\uffe3\011" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\026\uffe3\027\uffe3\030\uffe3\036\uffe3\046\uffe3\050" +
    "\uffe3\001\002\000\004\043\257\001\002\000\006\003\256" +
    "\043\255\001\002\000\040\003\253\005\174\011\171\012" +
    "\176\015\210\016\175\022\215\023\173\024\026\026\025" +
    "\027\021\030\022\036\254\046\206\050\170\001\002\000" +
    "\006\003\251\043\250\001\002\000\042\003\uffe2\005\uffe2" +
    "\011\uffe2\012\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\036\uffe2\046\uffe2" +
    "\050\uffe2\001\002\000\010\003\247\041\uff8d\043\246\001" +
    "\002\000\004\005\245\001\002\000\006\003\244\043\243" +
    "\001\002\000\006\003\237\033\240\001\002\000\042\003" +
    "\uffe0\005\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\036" +
    "\uffe0\046\uffe0\050\uffe0\001\002\000\006\003\236\043\235" +
    "\001\002\000\042\003\uffe1\005\uffe1\011\uffe1\012\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\036\uffe1\046\uffe1\050\uffe1\001\002\000" +
    "\004\041\216\001\002\000\006\003\uffa3\043\uffa3\001\002" +
    "\000\030\003\221\005\041\006\036\007\032\010\050\031" +
    "\040\032\042\033\037\035\220\051\034\060\044\001\002" +
    "\000\006\003\uff91\043\uff91\001\002\000\034\003\226\005" +
    "\041\006\036\007\032\010\050\031\040\032\042\033\037" +
    "\035\220\036\uff7a\042\uff7a\051\034\060\044\001\002\000" +
    "\006\003\uff87\043\uff87\001\002\000\006\003\uff88\043\uff88" +
    "\001\002\000\006\003\uff89\043\uff89\001\002\000\004\036" +
    "\234\001\002\000\006\036\uff7d\042\232\001\002\000\004" +
    "\035\220\001\002\000\006\036\uff77\042\uff77\001\002\000" +
    "\006\036\uff7e\042\122\001\002\000\006\036\uff76\042\uff76" +
    "\001\002\000\004\035\220\001\002\000\006\036\uff78\042" +
    "\uff78\001\002\000\012\003\uff7f\036\uff7f\042\uff7f\043\uff7f" +
    "\001\002\000\042\003\uffdf\005\uffdf\011\uffdf\012\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\036\uffdf\046\uffdf\050\uffdf\001\002\000" +
    "\042\003\uffd8\005\uffd8\011\uffd8\012\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\036\uffd8\046\uffd8\050\uffd8\001\002\000\006\003\uff92" +
    "\043\uff92\001\002\000\024\005\041\006\036\007\032\010" +
    "\050\031\040\032\042\033\037\051\034\060\044\001\002" +
    "\000\004\034\242\001\002\000\006\003\uff93\043\uff93\001" +
    "\002\000\042\003\uffdd\005\uffdd\011\uffdd\012\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\036\uffdd\046\uffdd\050\uffdd\001\002\000\042" +
    "\003\uffd6\005\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\036\uffd6\046\uffd6\050\uffd6\001\002\000\004\043\uff9e\001" +
    "\002\000\042\003\uffde\005\uffde\011\uffde\012\uffde\015\uffde" +
    "\016\uffde\017\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027" +
    "\uffde\030\uffde\036\uffde\046\uffde\050\uffde\001\002\000\042" +
    "\003\uffd7\005\uffd7\011\uffd7\012\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\036\uffd7\046\uffd7\050\uffd7\001\002\000\042\003\uffdc\005" +
    "\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\036\uffdc\046" +
    "\uffdc\050\uffdc\001\002\000\042\003\uffd5\005\uffd5\011\uffd5" +
    "\012\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\036\uffd5\046\uffd5\050\uffd5" +
    "\001\002\000\042\003\uffe4\005\uffe4\011\uffe4\012\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\036\uffe4\046\uffe4\050\uffe4\001\002\000" +
    "\052\002\uffe5\003\uffe5\005\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\036\uffe5\046\uffe5" +
    "\050\uffe5\001\002\000\052\002\uffe6\003\uffe6\005\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\036\uffe6\046\uffe6\050\uffe6\001\002\000\042\003\uffd9" +
    "\005\uffd9\011\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\036\uffd9" +
    "\046\uffd9\050\uffd9\001\002\000\042\003\uffd3\005\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\027\uffd3\030\uffd3\036\uffd3\046\uffd3\050" +
    "\uffd3\001\002\000\042\003\uffda\005\uffda\011\uffda\012\uffda" +
    "\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda\024\uffda\026" +
    "\uffda\027\uffda\030\uffda\036\uffda\046\uffda\050\uffda\001\002" +
    "\000\004\035\167\001\002\000\004\035\167\001\002\000" +
    "\024\005\041\006\036\007\032\010\050\031\040\032\042" +
    "\033\037\051\034\060\044\001\002\000\004\034\264\001" +
    "\002\000\004\035\uffac\001\002\000\006\013\266\014\267" +
    "\001\002\000\004\035\167\001\002\000\042\003\uffa9\005" +
    "\uffa9\011\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\036\uffa9\046" +
    "\uffa9\050\uffa9\001\002\000\004\014\271\001\002\000\042" +
    "\003\uffa7\005\uffa7\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\036\uffa7\046\uffa7\050\uffa7\001\002\000\010\003\273\013" +
    "\274\014\275\001\002\000\042\003\uffa8\005\uffa8\011\uffa8" +
    "\012\uffa8\015\uffa8\016\uffa8\017\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\036\uffa8\046\uffa8\050\uffa8" +
    "\001\002\000\004\035\167\001\002\000\042\003\uffab\005" +
    "\uffab\011\uffab\012\uffab\015\uffab\016\uffab\017\uffab\022\uffab" +
    "\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab\036\uffab\046" +
    "\uffab\050\uffab\001\002\000\006\003\277\014\300\001\002" +
    "\000\042\003\uffa6\005\uffa6\011\uffa6\012\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\036\uffa6\046\uffa6\050\uffa6\001\002\000\042\003" +
    "\uffaa\005\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\036" +
    "\uffaa\046\uffaa\050\uffaa\001\002\000\004\035\325\001\002" +
    "\000\024\005\041\006\036\007\032\010\050\031\040\032" +
    "\042\033\037\051\034\060\044\001\002\000\004\034\304" +
    "\001\002\000\006\003\305\035\306\001\002\000\042\003" +
    "\uff98\005\uff98\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98" +
    "\022\uff98\023\uff98\024\uff98\026\uff98\027\uff98\030\uff98\036" +
    "\uff98\046\uff98\050\uff98\001\002\000\004\017\310\001\002" +
    "\000\006\017\317\036\316\001\002\000\026\003\312\005" +
    "\041\006\036\007\032\010\050\031\040\032\042\033\037" +
    "\051\034\060\044\001\002\000\004\045\314\001\002\000" +
    "\034\005\174\011\171\012\176\015\210\016\175\022\215" +
    "\023\173\024\026\026\025\027\021\030\022\046\206\050" +
    "\170\001\002\000\040\005\174\011\171\012\176\015\210" +
    "\016\175\017\uff94\022\215\023\173\024\026\026\025\027" +
    "\021\030\022\036\uff94\046\206\050\170\001\002\000\034" +
    "\005\174\011\171\012\176\015\210\016\175\022\215\023" +
    "\173\024\026\026\025\027\021\030\022\046\206\050\170" +
    "\001\002\000\040\005\174\011\171\012\176\015\210\016" +
    "\175\017\uff96\022\215\023\173\024\026\026\025\027\021" +
    "\030\022\036\uff96\046\206\050\170\001\002\000\042\003" +
    "\uff9a\005\uff9a\011\uff9a\012\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\036" +
    "\uff9a\046\uff9a\050\uff9a\001\002\000\026\003\321\005\041" +
    "\006\036\007\032\010\050\031\040\032\042\033\037\051" +
    "\034\060\044\001\002\000\004\045\323\001\002\000\034" +
    "\005\174\011\171\012\176\015\210\016\175\022\215\023" +
    "\173\024\026\026\025\027\021\030\022\046\206\050\170" +
    "\001\002\000\040\005\174\011\171\012\176\015\210\016" +
    "\175\017\uff95\022\215\023\173\024\026\026\025\027\021" +
    "\030\022\036\uff95\046\206\050\170\001\002\000\034\005" +
    "\174\011\171\012\176\015\210\016\175\022\215\023\173" +
    "\024\026\026\025\027\021\030\022\046\206\050\170\001" +
    "\002\000\040\005\174\011\171\012\176\015\210\016\175" +
    "\017\uff97\022\215\023\173\024\026\026\025\027\021\030" +
    "\022\036\uff97\046\206\050\170\001\002\000\004\017\310" +
    "\001\002\000\006\017\317\036\327\001\002\000\042\003" +
    "\uff99\005\uff99\011\uff99\012\uff99\015\uff99\016\uff99\017\uff99" +
    "\022\uff99\023\uff99\024\uff99\026\uff99\027\uff99\030\uff99\036" +
    "\uff99\046\uff99\050\uff99\001\002\000\004\043\uff9b\001\002" +
    "\000\004\043\uff9d\001\002\000\004\041\uff8a\001\002\000" +
    "\032\003\335\005\041\006\036\007\032\010\050\031\040" +
    "\032\042\033\037\034\uff7a\042\uff7a\051\034\060\044\001" +
    "\002\000\010\037\113\041\uff8c\044\112\001\002\000\006" +
    "\003\uff9f\043\uff9f\001\002\000\006\034\337\042\122\001" +
    "\002\000\006\003\uffa0\043\uffa0\001\002\000\006\003\uffa2" +
    "\043\uffa2\001\002\000\006\003\uffa1\043\uffa1\001\002\000" +
    "\042\003\uffdb\005\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\036\uffdb\046\uffdb\050\uffdb\001\002\000\042\003\uffd4" +
    "\005\uffd4\011\uffd4\012\uffd4\015\uffd4\016\uffd4\017\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\036\uffd4" +
    "\046\uffd4\050\uffd4\001\002\000\004\035\167\001\002\000" +
    "\004\035\167\001\002\000\042\003\uffa4\005\uffa4\011\uffa4" +
    "\012\uffa4\015\uffa4\016\uffa4\017\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\036\uffa4\046\uffa4\050\uffa4" +
    "\001\002\000\042\003\uffa5\005\uffa5\011\uffa5\012\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\036\uffa5\046\uffa5\050\uffa5\001\002\000" +
    "\004\043\uff9c\001\002\000\006\034\uffea\042\uffea\001\002" +
    "\000\022\003\161\005\024\024\026\026\025\027\021\030" +
    "\022\034\uffe8\042\uffe8\001\002\000\006\034\354\042\164" +
    "\001\002\000\004\035\167\001\002\000\020\003\uffeb\005" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\001\002" +
    "\000\004\033\357\001\002\000\022\003\161\005\024\024" +
    "\026\026\025\027\021\030\022\034\uffe8\042\uffe8\001\002" +
    "\000\006\034\361\042\164\001\002\000\004\035\167\001" +
    "\002\000\020\003\uffec\005\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\001\002\000\006\003\364\033\365\001" +
    "\002\000\004\002\ufff9\001\002\000\004\034\366\001\002" +
    "\000\004\035\167\001\002\000\004\002\ufffa\001\002\000" +
    "\010\003\uffcc\005\uffcc\037\031\001\002\000\010\003\uffce" +
    "\005\uffce\037\031\001\002\000\006\003\373\041\374\001" +
    "\002\000\024\003\ufff3\005\ufff3\020\ufff3\021\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\001\002\000\004\035" +
    "\375\001\002\000\006\003\376\005\377\001\002\000\006" +
    "\005\u0106\042\u0105\001\002\000\006\036\ufff1\042\ufff1\001" +
    "\002\000\006\036\u0102\042\u0101\001\002\000\004\005\u0104" +
    "\001\002\000\004\043\u0103\001\002\000\024\003\ufff4\005" +
    "\ufff4\020\ufff4\021\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\001\002\000\006\036\ufff2\042\ufff2\001\002\000" +
    "\006\036\ufff0\042\ufff0\001\002\000\006\036\uffef\042\uffef" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\006\002\004\003\003\001\001\000\010\004" +
    "\012\006\010\010\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\152\012\147\016" +
    "\144\017\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\016\016\017\040\022\001\001\000\006\016\017" +
    "\040\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\027\001\001\000" +
    "\002\001\001\000\020\021\032\022\051\023\050\024\046" +
    "\025\045\026\044\041\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\132\025\045\026\044\041\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\130\022\051\023\050\024\046\025\045\026\044\041\034" +
    "\001\001\000\002\001\001\000\004\044\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\104\026\044" +
    "\041\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\055\022\051\023\050\024\046\025" +
    "\045\026\044\041\034\001\001\000\020\021\054\022\051" +
    "\023\050\024\046\025\045\026\044\041\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\071\024\046" +
    "\025\045\026\044\041\034\001\001\000\014\023\070\024" +
    "\046\025\045\026\044\041\034\001\001\000\014\023\067" +
    "\024\046\025\045\026\044\041\034\001\001\000\014\023" +
    "\066\024\046\025\045\026\044\041\034\001\001\000\014" +
    "\023\065\024\046\025\045\026\044\041\034\001\001\000" +
    "\014\023\064\024\046\025\045\026\044\041\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\023\075\024\046\025\045\026\044\041\034\001\001\000" +
    "\014\023\074\024\046\025\045\026\044\041\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\101\025" +
    "\045\026\044\041\034\001\001\000\012\024\100\025\045" +
    "\026\044\041\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\103\026\044\041\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\126\022\051\023" +
    "\050\024\046\025\045\026\044\041\034\001\001\000\002" +
    "\001\001\000\022\021\120\022\051\023\050\024\046\025" +
    "\045\026\044\041\034\053\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\113\022\051\023\050\024" +
    "\046\025\045\026\044\041\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\123\022\051" +
    "\023\050\024\046\025\045\026\044\041\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\370\001" +
    "\001\000\004\045\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\017\040\161\046\157\001\001\000\002\001" +
    "\001\000\006\016\017\040\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\017\040\350\001\001\000" +
    "\004\013\165\001\001\000\002\001\001\000\036\014\201" +
    "\015\176\016\017\027\203\030\212\031\210\032\171\033" +
    "\202\034\206\035\200\036\211\037\177\040\204\042\213" +
    "\001\001\000\002\001\001\000\004\020\343\001\001\000" +
    "\002\001\001\000\020\021\337\022\051\023\050\024\046" +
    "\025\045\026\044\041\034\001\001\000\004\044\333\001" +
    "\001\000\002\001\001\000\004\020\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\015" +
    "\251\016\017\027\203\030\212\031\210\032\171\033\202" +
    "\034\206\035\200\036\211\037\177\040\204\042\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\021\222\022\051\023" +
    "\050\024\046\025\045\026\044\041\034\043\216\050\221" +
    "\001\001\000\002\001\001\000\030\021\120\022\051\023" +
    "\050\024\046\025\045\026\044\041\034\050\226\051\223" +
    "\052\224\053\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\240\022\051\023\050" +
    "\024\046\025\045\026\044\041\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\271\001\001\000\004" +
    "\013\264\001\001\000\020\021\262\022\051\023\050\024" +
    "\046\025\045\026\044\041\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\302\022" +
    "\051\023\050\024\046\025\045\026\044\041\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\306\001\001\000\002\001\001\000\020\021\310" +
    "\022\051\023\050\024\046\025\045\026\044\041\034\001" +
    "\001\000\002\001\001\000\036\014\312\015\176\016\017" +
    "\027\203\030\212\031\210\032\171\033\202\034\206\035" +
    "\200\036\211\037\177\040\204\042\213\001\001\000\034" +
    "\015\251\016\017\027\203\030\212\031\210\032\171\033" +
    "\202\034\206\035\200\036\211\037\177\040\204\042\213" +
    "\001\001\000\036\014\314\015\176\016\017\027\203\030" +
    "\212\031\210\032\171\033\202\034\206\035\200\036\211" +
    "\037\177\040\204\042\213\001\001\000\034\015\251\016" +
    "\017\027\203\030\212\031\210\032\171\033\202\034\206" +
    "\035\200\036\211\037\177\040\204\042\213\001\001\000" +
    "\002\001\001\000\020\021\317\022\051\023\050\024\046" +
    "\025\045\026\044\041\034\001\001\000\002\001\001\000" +
    "\036\014\321\015\176\016\017\027\203\030\212\031\210" +
    "\032\171\033\202\034\206\035\200\036\211\037\177\040" +
    "\204\042\213\001\001\000\034\015\251\016\017\027\203" +
    "\030\212\031\210\032\171\033\202\034\206\035\200\036" +
    "\211\037\177\040\204\042\213\001\001\000\036\014\323" +
    "\015\176\016\017\027\203\030\212\031\210\032\171\033" +
    "\202\034\206\035\200\036\211\037\177\040\204\042\213" +
    "\001\001\000\034\015\251\016\017\027\203\030\212\031" +
    "\210\032\171\033\202\034\206\035\200\036\211\037\177" +
    "\040\204\042\213\001\001\000\004\047\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\120\022\051\023" +
    "\050\024\046\025\045\026\044\041\034\053\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\346\001\001\000" +
    "\004\013\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\017\040" +
    "\161\046\352\001\001\000\002\001\001\000\004\013\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\017\040\161\046\357\001\001\000\002\001\001\000\004" +
    "\013\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= DecStructEnum DecFunciones MainF 
            {
              Programa RESULT =null;
		StructEnum strenum = (StructEnum)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Funciones funcs = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		MainFuncion m = (MainFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(strenum, funcs, m); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DecStructEnum ::= DecStructEnum Struct 
            {
              StructEnum RESULT =null;
		StructEnum strenum = (StructEnum)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Struct str = (Struct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = strenum; strenum.addS(str); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecStructEnum",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DecStructEnum ::= DecStructEnum EnumClass 
            {
              StructEnum RESULT =null;
		StructEnum strenum = (StructEnum)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		EnumClass en = (EnumClass)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = strenum; strenum.addE(en); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecStructEnum",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DecStructEnum ::= 
            {
              StructEnum RESULT =null;
		 RESULT = new StructEnum(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecStructEnum",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DecFunciones ::= DecFunciones Funcion 
            {
              Funciones RESULT =null;
		Funciones funcs = (Funciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Funcion fun = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = funcs; funcs.addF(fun); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecFunciones",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DecFunciones ::= 
            {
              Funciones RESULT =null;
		 RESULT = new Funciones(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecFunciones",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MainF ::= VOID MAIN PAP PCIERRE Bloque 
            {
              MainFuncion RESULT =null;
		Bloque bl = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new MainFuncion(bl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MainF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MainF ::= VOID MAIN error 
            {
              MainFuncion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("MainF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Struct ::= STRUCT IDEN LAP LStruct LCIERRE PUNTOYCOMA 
            {
              Struct RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<InsDec> ls = (ArrayList<InsDec>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT =  new Struct(id.lexema, ls); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Struct ::= STRUCT IDEN error 
            {
              Struct RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Struct",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LStruct ::= LStruct Declaracion PUNTOYCOMA 
            {
              ArrayList<InsDec> RESULT =null;
		ArrayList<InsDec> ls = (ArrayList<InsDec>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ls; ls.add(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LStruct ::= Declaracion PUNTOYCOMA 
            {
              ArrayList<InsDec> RESULT =null;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ArrayList<InsDec>(); RESULT.add(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LStruct",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EnumClass ::= ENUM IDEN IGUAL LAP LEnum LCIERRE PUNTOYCOMA 
            {
              EnumClass RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		ArrayList<String> le = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new EnumClass(id.lexema, le); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EnumClass",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EnumClass ::= ENUM IDEN error 
            {
              EnumClass RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EnumClass",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LEnum ::= LEnum COMA IDEN 
            {
              ArrayList<String> RESULT =null;
		ArrayList<String> le = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = le; le.add(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LEnum ::= IDEN 
            {
              ArrayList<String> RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LEnum ::= error COMA 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LEnum ::= error IDEN 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEnum",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Funcion ::= TypeFunc IDEN PAP SecParam PCIERRE Bloque 
            {
              Funcion RESULT =null;
		TipoFunc tf = (TipoFunc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<InsDec> secP = (ArrayList<InsDec>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Bloque bl = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Funcion(tf, id.lexema, secP, bl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Funcion ::= TypeFunc IDEN error 
            {
              Funcion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Funcion ::= error IDEN PAP SecParam PCIERRE Bloque 
            {
              Funcion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Funcion ::= TypeFunc error PAP SecParam PCIERRE Bloque 
            {
              Funcion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SecParam ::= SecParam COMA Declaracion 
            {
              ArrayList<InsDec> RESULT =null;
		ArrayList<InsDec> secP = (ArrayList<InsDec>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = secP; secP.add(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecParam",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SecParam ::= Declaracion 
            {
              ArrayList<InsDec> RESULT =null;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<InsDec>(); RESULT.add(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecParam",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SecParam ::= 
            {
              ArrayList<InsDec> RESULT =null;
		 RESULT = new ArrayList<InsDec>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecParam",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SecParam ::= error Declaracion 
            {
              ArrayList<InsDec> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecParam",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bloque ::= LAP Lins LCIERRE 
            {
              Bloque RESULT =null;
		ArrayList<Instruccion> lins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Bloque(lins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bloque ::= LAP Lins error 
            {
              Bloque RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lins ::= Lins Ins 
            {
              ArrayList<Instruccion> RESULT =null;
		ArrayList<Instruccion> l = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = l; l.add(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lins",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lins ::= Ins 
            {
              ArrayList<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<Instruccion>(); RESULT.add(ins); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Lins",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ins ::= If 
            {
              Instruccion RESULT =null;
		InsIf if1 = (InsIf)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = if1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ins ::= While 
            {
              Instruccion RESULT =null;
		InsWhile while1 = (InsWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = while1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ins ::= Switch 
            {
              Instruccion RESULT =null;
		InsSwitch switch1 = (InsSwitch)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = switch1; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ins ::= Asignacion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsAsig asig = (InsAsig)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = asig; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ins ::= Declaracion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ins ::= Return PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsRet ret = (InsRet)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = ret; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ins ::= Bartolo PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsBart bar = (InsBart)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = bar; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ins ::= InsFunc PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsFunc fun = (InsFunc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ins ::= InsExp PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsAsig exp = (InsAsig)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ins ::= Print PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		InsPrint print = (InsPrint)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = print; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ins ::= Asignacion error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ins ::= Declaracion error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Ins ::= Return error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Ins ::= Bartolo error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Ins ::= InsFunc error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Ins ::= Print error 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ins",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Type ::= INT 
            {
              Tipo RESULT =null;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Tipo(ent.lexema,true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Type ::= CHAR 
            {
              Tipo RESULT =null;
		TokenValue char1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Tipo(char1.lexema,true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= BOOL 
            {
              Tipo RESULT =null;
		TokenValue bool1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Tipo(bool1.lexema,true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= STRING 
            {
              Tipo RESULT =null;
		TokenValue str = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Tipo(str.lexema,true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeFunc ::= Type EstructuraArray 
            {
              TipoFunc RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoFunc(t, false); RESULT.tipo.dims = e; RESULT.tipo.nDim = e.size(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TypeFunc",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeFunc ::= VOID 
            {
              TipoFunc RESULT =null;
		TokenValue void1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoFunc(new Tipo(void1.lexema, true), true); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TypeFunc",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeFunc ::= IDEN EstructuraArray 
            {
              TipoFunc RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoFunc(new Tipo(id.lexema, true), false); RESULT.tipo.dims = e; RESULT.tipo.nDim = e.size(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TypeFunc",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp0 ::= Exp1 AND Exp0 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e1, o.lexema, e0); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp0 ::= Exp1 OR Exp0 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e0 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e1, o.lexema, e0); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp1 ::= Exp2 MAY Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp1 ::= Exp2 MEN Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp1 ::= Exp2 IGIG Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp1 ::= Exp2 DESIG Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp1 ::= Exp2 MAYIG Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp1 ::= Exp2 MENIG Exp2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e2, o.lexema, e1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp2 ::= Exp3 MAS Exp2 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e3, o.lexema, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp2 ::= Exp3 MENOS Exp2 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e3, o.lexema, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp2 ::= MENOS Exp3 
            {
              Expresion RESULT =null;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpUnaria(o.lexema, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp3 ::= Exp4 POR Exp3 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e4, o.lexema, e3); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp3 ::= Exp4 DIV Exp3 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e4, o.lexema, e3); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp4 ::= NOT Exp4 
            {
              Expresion RESULT =null;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpUnaria(o.lexema, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp4 ::= Exp5 MOD Exp4 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue o = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBinaria(e5, o.lexema, e4); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp5 ::= PAP Exp0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp5 ::= TRUE 
            {
              Expresion RESULT =null;
		TokenValue exp = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBasica("bool", exp.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp5 ::= FALSE 
            {
              Expresion RESULT =null;
		TokenValue exp = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBasica("bool", exp.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp5 ::= ENT 
            {
              Expresion RESULT =null;
		TokenValue exp = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBasica("int", exp.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp5 ::= CADENA 
            {
              Expresion RESULT =null;
		TokenValue exp = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBasica("String", exp.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp5 ::= CARACTER 
            {
              Expresion RESULT =null;
		TokenValue exp = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ExpBasica("char", exp.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp5 ::= ExpFunc 
            {
              Expresion RESULT =null;
		ExpFunc exp = (ExpFunc)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp5 ::= IDEN Estructura 
            {
              Expresion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Acceso(id.lexema, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp5 ::= IDEN 
            {
              Expresion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Acceso(id.lexema); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpFunc ::= IDEN PAP SecExp PCIERRE 
            {
              ExpFunc RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<Expresion> lParam = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpFunc(id.lexema, lParam); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpFunc",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpFunc ::= IDEN PAP error 
            {
              ExpFunc RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpFunc",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Cond ::= PAP Exp0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Cond",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // If ::= IF Cond Bloque END 
            {
              InsIf RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Bloque bl = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsIf(cond, bl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // If ::= IF Cond Bloque ELSE Bloque END 
            {
              InsIf RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Bloque bl1 = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Bloque bl3 = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsIf(cond, bl1, bl3); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // If ::= IF error Bloque END 
            {
              InsIf RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // If ::= IF Cond Bloque error 
            {
              InsIf RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // If ::= IF error Bloque ELSE Bloque END 
            {
              InsIf RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // If ::= IF Cond Bloque ELSE Bloque error 
            {
              InsIf RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("If",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // While ::= WHILE Cond Bloque 
            {
              InsWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Bloque bl = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsWhile(cond, bl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // While ::= WHILE error Bloque 
            {
              InsWhile RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("While",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Bartolo ::= BARTOLO 
            {
              InsBart RESULT =null;
		 RESULT = new InsBart(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bartolo",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Return ::= RETURN Exp0 
            {
              InsRet RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsRet(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Return ::= RETURN error 
            {
              InsRet RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Return",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InsFunc ::= IDEN PAP SecExp PCIERRE 
            {
              InsFunc RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayList<Expresion> lParam = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsFunc(id.lexema, lParam); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFunc",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InsFunc ::= IDEN PAP error 
            {
              InsFunc RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsFunc",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InsExp ::= MASMAS IDEN 
            {
              InsAsig RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsAsig(new ParteIzq(new Acceso(id.lexema)), new ParteDer(new ExpBinaria(new Acceso(id.lexema), "+", new ExpBasica("int", "1")))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsExp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InsExp ::= IDEN MASMAS 
            {
              InsAsig RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsAsig(new ParteIzq(new Acceso(id.lexema)), new ParteDer(new ExpBinaria(new Acceso(id.lexema), "+", new ExpBasica("int", "1")))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsExp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // InsExp ::= MENOSMENOS IDEN 
            {
              InsAsig RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsAsig(new ParteIzq(new Acceso(id.lexema)), new ParteDer(new ExpBinaria(new Acceso(id.lexema), "-", new ExpBasica("int", "1")))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsExp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // InsExp ::= IDEN MENOSMENOS 
            {
              InsAsig RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsAsig(new ParteIzq(new Acceso(id.lexema)), new ParteDer(new ExpBinaria(new Acceso(id.lexema), "-", new ExpBasica("int", "1")))); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InsExp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Switch ::= SWITCH PAP Exp0 PCIERRE LAP ListaCases LCIERRE 
            {
              InsSwitch RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayList<Case> lcases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsSwitch(exp, lcases); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Switch ::= SWITCH error LAP ListaCases LCIERRE 
            {
              InsSwitch RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Switch ::= SWITCH PAP Exp0 PCIERRE error 
            {
              InsSwitch RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Switch",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ListaCases ::= ListaCases CASE Exp0 DOSPUNTOS Lins 
            {
              ArrayList<Case> RESULT =null;
		ArrayList<Case> lcase = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Instruccion> lins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = lcase; lcase.add(new Case(exp, lins)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCases",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ListaCases ::= CASE Exp0 DOSPUNTOS Lins 
            {
              ArrayList<Case> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayList<Instruccion> lins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<Case>(); RESULT.add(new Case(exp, lins)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCases",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ListaCases ::= ListaCases CASE error Lins 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCases",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ListaCases ::= CASE error Lins 
            {
              ArrayList<Case> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCases",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Print ::= PRINT PAP Exp0 PCIERRE 
            {
              InsPrint RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InsPrint(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Print ::= PRINT error 
            {
              InsPrint RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Print",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Asignacion ::= ParteIzquierda IGUAL ParteDerecha 
            {
              InsAsig RESULT =null;
		ParteIzq pi = (ParteIzq)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ParteDer pd = (ParteDer)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsAsig(pi, pd); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Asignacion",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Declaracion ::= Type IDEN EstructuraArray 
            {
              InsDec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsDec(t, id.lexema); RESULT.tipo.dims = e; RESULT.tipo.nDim = e.size(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Declaracion ::= IDEN IDEN EstructuraArray 
            {
              InsDec RESULT =null;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id3 = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InsDec(new Tipo(id1.lexema,false), id3.lexema); RESULT.tipo.dims = e ; RESULT.tipo.nDim = e.size(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Declaracion ::= Type error 
            {
              InsDec RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ParteIzquierda ::= Declaracion 
            {
              ParteIzq RESULT =null;
		InsDec dec = (InsDec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ParteIzq(dec); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteIzquierda",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ParteIzquierda ::= IDEN Estructura 
            {
              ParteIzq RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ParteIzq(new Acceso(id.lexema, e)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteIzquierda",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ParteIzquierda ::= IDEN 
            {
              ParteIzq RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ParteIzq(new Acceso(id.lexema)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteIzquierda",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ParteIzquierda ::= IDEN error 
            {
              ParteIzq RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteIzquierda",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ParteDerecha ::= Exp0 
            {
              ParteDer RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ParteDer(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteDerecha",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ParteDerecha ::= LInitArray 
            {
              ParteDer RESULT =null;
		InitArray ia = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ParteDer(ia); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteDerecha",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ParteDerecha ::= error 
            {
              ParteDer RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParteDerecha",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Estructura ::= Estructura CAP Exp0 CCIERRE 
            {
              Estructura RESULT =null;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; e.acc.add(exp); e.aux.add(1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Estructura",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Estructura ::= Estructura PUNTO IDEN 
            {
              Estructura RESULT =null;
		Estructura e = (Estructura)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; e.acc.add(new ExpBasica("null", id.lexema)); e.aux.add(0); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Estructura",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Estructura ::= CAP Exp0 CCIERRE 
            {
              Estructura RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Estructura(); RESULT.acc.add(exp); RESULT.aux.add(1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Estructura",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Estructura ::= PUNTO IDEN 
            {
              Estructura RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Estructura(); RESULT.acc.add(new ExpBasica("null", id.lexema)); RESULT.aux.add(0); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Estructura",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EstructuraArray ::= EstructuraArray CAP Exp0 CCIERRE 
            {
              ArrayList<Expresion> RESULT =null;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; e.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EstructuraArray",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EstructuraArray ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EstructuraArray",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EstructuraArray ::= EstructuraArray CAP error 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EstructuraArray",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LInitArray ::= LAP InitArray LCIERRE 
            {
              InitArray RESULT =null;
		InitArray i = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = i; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LInitArray",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // InitArray ::= SecExp 
            {
              InitArray RESULT =null;
		ArrayList<Expresion> secE = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InitArray(); RESULT.addExp(secE); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InitArray",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // InitArray ::= SecInitArray 
            {
              InitArray RESULT =null;
		InitArray secI = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = secI; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("InitArray",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SecExp ::= SecExp COMA Exp0 
            {
              ArrayList<Expresion> RESULT =null;
		ArrayList<Expresion> sec = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sec; sec.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecExp",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SecExp ::= Exp0 
            {
              ArrayList<Expresion> RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecExp",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SecExp ::= 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecExp",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SecExp ::= SecExp COMA error 
            {
              ArrayList<Expresion> RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecExp",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SecInitArray ::= SecInitArray COMA LInitArray 
            {
              InitArray RESULT =null;
		InitArray secI = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		InitArray l = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = secI; secI.add(l); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecInitArray",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SecInitArray ::= LInitArray 
            {
              InitArray RESULT =null;
		InitArray l = (InitArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InitArray(); RESULT.add(l); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecInitArray",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SecInitArray ::= error LInitArray 
            {
              InitArray RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SecInitArray",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

